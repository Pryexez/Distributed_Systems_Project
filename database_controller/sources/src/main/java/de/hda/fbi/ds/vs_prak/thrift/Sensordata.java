/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.hda.fbi.ds.vs_prak.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-06-03")
public class Sensordata implements org.apache.thrift.TBase<Sensordata, Sensordata._Fields>, java.io.Serializable, Cloneable, Comparable<Sensordata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sensordata");

  private static final org.apache.thrift.protocol.TField SENSORID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField HUMIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("humidity", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SensordataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SensordataTupleSchemeFactory();

  public int sensorid; // required
  public double temperature; // required
  public double humidity; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String date; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENSORID((short)1, "sensorid"),
    TEMPERATURE((short)2, "temperature"),
    HUMIDITY((short)3, "humidity"),
    DATE((short)4, "date");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENSORID
          return SENSORID;
        case 2: // TEMPERATURE
          return TEMPERATURE;
        case 3: // HUMIDITY
          return HUMIDITY;
        case 4: // DATE
          return DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENSORID_ISSET_ID = 0;
  private static final int __TEMPERATURE_ISSET_ID = 1;
  private static final int __HUMIDITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENSORID, new org.apache.thrift.meta_data.FieldMetaData("sensorid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("temperature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HUMIDITY, new org.apache.thrift.meta_data.FieldMetaData("humidity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sensordata.class, metaDataMap);
  }

  public Sensordata() {
  }

  public Sensordata(
    int sensorid,
    double temperature,
    double humidity,
    java.lang.String date)
  {
    this();
    this.sensorid = sensorid;
    setSensoridIsSet(true);
    this.temperature = temperature;
    setTemperatureIsSet(true);
    this.humidity = humidity;
    setHumidityIsSet(true);
    this.date = date;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sensordata(Sensordata other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sensorid = other.sensorid;
    this.temperature = other.temperature;
    this.humidity = other.humidity;
    if (other.isSetDate()) {
      this.date = other.date;
    }
  }

  public Sensordata deepCopy() {
    return new Sensordata(this);
  }

  @Override
  public void clear() {
    setSensoridIsSet(false);
    this.sensorid = 0;
    setTemperatureIsSet(false);
    this.temperature = 0.0;
    setHumidityIsSet(false);
    this.humidity = 0.0;
    this.date = null;
  }

  public int getSensorid() {
    return this.sensorid;
  }

  public Sensordata setSensorid(int sensorid) {
    this.sensorid = sensorid;
    setSensoridIsSet(true);
    return this;
  }

  public void unsetSensorid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENSORID_ISSET_ID);
  }

  /** Returns true if field sensorid is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENSORID_ISSET_ID);
  }

  public void setSensoridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENSORID_ISSET_ID, value);
  }

  public double getTemperature() {
    return this.temperature;
  }

  public Sensordata setTemperature(double temperature) {
    this.temperature = temperature;
    setTemperatureIsSet(true);
    return this;
  }

  public void unsetTemperature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  /** Returns true if field temperature is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  public void setTemperatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMPERATURE_ISSET_ID, value);
  }

  public double getHumidity() {
    return this.humidity;
  }

  public Sensordata setHumidity(double humidity) {
    this.humidity = humidity;
    setHumidityIsSet(true);
    return this;
  }

  public void unsetHumidity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HUMIDITY_ISSET_ID);
  }

  /** Returns true if field humidity is set (has been assigned a value) and false otherwise */
  public boolean isSetHumidity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HUMIDITY_ISSET_ID);
  }

  public void setHumidityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HUMIDITY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDate() {
    return this.date;
  }

  public Sensordata setDate(@org.apache.thrift.annotation.Nullable java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SENSORID:
      if (value == null) {
        unsetSensorid();
      } else {
        setSensorid((java.lang.Integer)value);
      }
      break;

    case TEMPERATURE:
      if (value == null) {
        unsetTemperature();
      } else {
        setTemperature((java.lang.Double)value);
      }
      break;

    case HUMIDITY:
      if (value == null) {
        unsetHumidity();
      } else {
        setHumidity((java.lang.Double)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SENSORID:
      return getSensorid();

    case TEMPERATURE:
      return getTemperature();

    case HUMIDITY:
      return getHumidity();

    case DATE:
      return getDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SENSORID:
      return isSetSensorid();
    case TEMPERATURE:
      return isSetTemperature();
    case HUMIDITY:
      return isSetHumidity();
    case DATE:
      return isSetDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Sensordata)
      return this.equals((Sensordata)that);
    return false;
  }

  public boolean equals(Sensordata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sensorid = true;
    boolean that_present_sensorid = true;
    if (this_present_sensorid || that_present_sensorid) {
      if (!(this_present_sensorid && that_present_sensorid))
        return false;
      if (this.sensorid != that.sensorid)
        return false;
    }

    boolean this_present_temperature = true;
    boolean that_present_temperature = true;
    if (this_present_temperature || that_present_temperature) {
      if (!(this_present_temperature && that_present_temperature))
        return false;
      if (this.temperature != that.temperature)
        return false;
    }

    boolean this_present_humidity = true;
    boolean that_present_humidity = true;
    if (this_present_humidity || that_present_humidity) {
      if (!(this_present_humidity && that_present_humidity))
        return false;
      if (this.humidity != that.humidity)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + sensorid;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(temperature);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(humidity);

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Sensordata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSensorid(), other.isSetSensorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorid, other.sensorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTemperature(), other.isSetTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature, other.temperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHumidity(), other.isSetHumidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHumidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.humidity, other.humidity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDate(), other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Sensordata(");
    boolean first = true;

    sb.append("sensorid:");
    sb.append(this.sensorid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperature:");
    sb.append(this.temperature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("humidity:");
    sb.append(this.humidity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensordataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensordataStandardScheme getScheme() {
      return new SensordataStandardScheme();
    }
  }

  private static class SensordataStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sensordata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sensordata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENSORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sensorid = iprot.readI32();
              struct.setSensoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperature = iprot.readDouble();
              struct.setTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HUMIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.humidity = iprot.readDouble();
              struct.setHumidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sensordata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SENSORID_FIELD_DESC);
      oprot.writeI32(struct.sensorid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPERATURE_FIELD_DESC);
      oprot.writeDouble(struct.temperature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HUMIDITY_FIELD_DESC);
      oprot.writeDouble(struct.humidity);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensordataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensordataTupleScheme getScheme() {
      return new SensordataTupleScheme();
    }
  }

  private static class SensordataTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sensordata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sensordata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSensorid()) {
        optionals.set(0);
      }
      if (struct.isSetTemperature()) {
        optionals.set(1);
      }
      if (struct.isSetHumidity()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSensorid()) {
        oprot.writeI32(struct.sensorid);
      }
      if (struct.isSetTemperature()) {
        oprot.writeDouble(struct.temperature);
      }
      if (struct.isSetHumidity()) {
        oprot.writeDouble(struct.humidity);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sensordata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sensorid = iprot.readI32();
        struct.setSensoridIsSet(true);
      }
      if (incoming.get(1)) {
        struct.temperature = iprot.readDouble();
        struct.setTemperatureIsSet(true);
      }
      if (incoming.get(2)) {
        struct.humidity = iprot.readDouble();
        struct.setHumidityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

